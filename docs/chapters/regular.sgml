  <chapter id="dbp.regular">
    <title>Common Tasks</title>
    <para>
      This chapter describes how to use &dbp; to carry out regular,
      every-day development activities.
    </para>

    <sect1 id="dbp.regular.getting">
      <title>Getting Sources</title>
      <para>
        FIXME: write this
      </para>
    </sect1>

    <sect1 id="dbp.regular.building">
      <title>Building and Working With Source</title>
      <indexterm><primary>darcs-buildpackage</></>
      <para>
        Before you start working on any source package with &dbp;,
        first check it out as described in <xref
          linkend="dbp.regular.fetching"> to make sure it is in its
        proper location.  Then, as you work, you will use
        <command>darcs record</command> to commit your changes to the
        Debian repository.  (If you just want to build an old package,
        there's no need to do this.)
      </para>
      <para>
        When you're ready to build a package, just run
        &darcs-buildpackage; to build it.  The &darcs-buildpackage;
        command takes the same arguments as
        <command>debuild</command>, and passes them on to
        <command>debuild</command>, so give it your usual set.
        &darcs-buildpackage; will use your existing orig.tar.gz file for
        source generation, if it exists; otherwise, it will take care
        of automatically building it from the upstream sources if
        necessary.
      </para>
      <para>
        FIXME: these examples are from arch and need to be updated for
        Darcs
      </para>
      <para>
        Here's an example:
      </para>
      <screen>
~/tree/debian$ <command>cd +packages/rdiff-backup/rdiff-backup-0.12.5</command>
~/tree/debian/+packages/rdiff-backup/rdiff-backup-0.12.5$ <command>darcs-buildpackage \
        -rfakeroot -us -uc</command>
...
Building .orig from archive.
 * tla buildcfg upstream/rdiff-backup/0.12.5
* from import revision: jgoerzen@complete.org--debian/rdiff-backup--head--1.0--base-0
* patching for revision: jgoerzen@complete.org--debian/rdiff-backup--head--1.0--patch-1
* patching for revision: jgoerzen@complete.org--debian/rdiff-backup--head--1.0--patch-2
* making pristine copy
* tree version set jgoerzen@complete.org--debian/rdiff-backup--head--1.0
 * tla inventory -s "rdiff-backup-0.12.5.orig" | tar -cSpf - -T- | gzip -9 > "rdiff-backup_0.12.5.orig.tar.gz"
 *** Running build program
Running:  debuild ['-i\\+\\+pristine-trees|,,*|\\{arch\\}|\\.arch-ids', '-rfakeroot', '-us', '-uc']
...
      </screen>
      <para>
        In this case, I had not checked out the upstream source and
        did not have my orig.tar.gz file handy.  Therefore,
        &darcs-buildpackage; checked out the upstream sources for me,
        generated the tar.gz file, and then called
        <command>debuild</command>
        to do the
        rest.
      </para>
      <para>
        If you are building for Debian, you will want to keep your
        orig.tar.gz around so that future source uploads use the same
        MD5 sum in the .dsc file.
      </para>
      <para>
        For more details, please see the manpage for
        <xref linkend="dbp.man.darcs.buildpackage">.
      </para>
    </sect1>

    <sect1 id="dbp.regular.upstream-update">
      <title>Handling New Upstream Versions</title>
      <para>
        A common scenario for a Debian developer to deal with is that
        of a new upstream release.  The Debian patches from the most
        recent Debian release must be merged into the upstream one.
      </para>
      <para>
        There have been a few tools to do that:
        <command>uupdate</command> is one.  However, now that you are
        using Darcs, you can use its built-in <command>pull</command> command to make this
        easier.
      </para>
      <para>
        The first thing that you will do is to import the new upstream
        sources into your &dbp; archive.  Please see <xref
          linkend="dbp.import.orig"> for instructions.
      </para>
      <para>
        Next, check out the latest Debian version if you don't already
        have it (see <xref linkend="dbp.regular.fetching">) and then
        cd into the Debian source directory.
      </para>
      <para>
        [ Note: I anticipate writing a program to automate the
        following steps. ]
      </para>
      <sect2 id="dbp.upstream.merging">
        <title>Merging In Upstream</title>
        <para>
          Now, you are ready to merge in the new upstream.  Run
          <command>darcs pull</command>, giving it the path to your
          canonical upstream repository.
        </para>
        <para>FIXME: add a sect3 demonstrating</para>
      </sect2>
      <sect2 id="dbp.upstream.merge.examining">
        <title>Examining the Merge</title>
        <para>
          Now, you will want to examine the merge, especially if &darcs;
          complained of any conflicts.
        </para>
        <para>
          You'll also want to note the new version in
          <filename>debian/changelog</filename> and rename your
          directory based on the new version.  I find it easy to run a
          command like
          <command>debchange -v 0.13.3-1</command>, then modify the
          changelog as appropriate.  debchange will handle the rename
          for you.
        </para>
      </sect2>
      <sect2 id="dbp.upstream.commiting">
        <title>Committing the Merge</title>
        <para>
          Finally, you will want to commit the merge.  If you want to
          just use a simple log message, a command like this will
          work:
        </para>
        <screen>
$ <command>darcs record -m "Merged in upstream 0.13.3"</command>
FIXME: show output
        </screen>
        <para>
          The string supplied after the -m is the log message.
        </para>
        <para>
          If you want to add a more detailed log, try this, just run
          <command>darcs record</command> and it will prompt you for one.
        </para>
        <para>
          You can see what happened by using <command>darcs changes
          -s</command>:
        </para>
        <screen>
$ <command>darcs changes -s</command>
FIXME: show output
        </screen>
        <para>
          Slick -- it shows exactly which upstream patches you used.
        </para>
      </sect2>
    </sect1>

    <sect1 id="tla.regular.debian-update">
      <title>Finalizing New Debian Versions</title>
      <indexterm><primary>dbp-markdeb</primary>
      <para>
        When you have uploaded a Debian package to the archive, you
        should ask &dbp; to note this for you.  That way, you can
        request this specific version later.  Just run this:
      </para>
      <screen>
$ <command>dbp-markdeb</command>
FIXME: show output.
      </screen>
      <para>
        The reason for this is that you might make several commits
        during the course of hacking on a given Debian version.  This
        command lets you note the final version, and to run it again,
        you must update the changelog.
      </para>
      <para>
        Technically speaking, this creates the DEBIAN_ tag.
      </para>
    </sect1>

    
    <sect1 id="dbp.regular.historic-versions">
      <title>Finding Historic Versions</title>
      <indexterm><primary>Configs</></>
      <para>FIXME: this is not yet updated for Darcs</para>
      <para>
        To find the versions available in your &dbp; archive, first cd
        to its top level and then run:
      </para>
      <screen>
$ <command>ls configs/*/*</command>
configs/debian/rdiff-backup:
0.12.3-1  0.12.5-1

configs/upstream/rdiff-backup:
0.12.3  0.12.5
      </screen>
      <para>
        This shows you that two Debian versions and two upstream
        versions of rdiff-backup are present.
      </para>
    </sect1>
    <sect1 id="dbp.regular.fetching">
      <title>Fetching Source from History</title>
      <indexterm><primary>Configs</></>
      <para>
        To fetch the source code from the &dbp; archive, first
        <command>cd</command> into your top-level working copy.
        Then, using the name of the config file (see <xref
          linkend="dbp.regular.historic-versions">), use the
        <command>tla buildcfg</command> command:
      </para>
      <screen>
$ <command>tla buildcfg debian/rdiff-backup/0.12.5-1</command>
* from import revision: jgoerzen@complete.org--debian/rdiff-backup--head--1.0--base-0
* patching for revision: jgoerzen@complete.org--debian/rdiff-backup--head--1.0--patch-1
* patching for revision: jgoerzen@complete.org--debian/rdiff-backup--debian--1.0--base-0
* patching for revision: jgoerzen@complete.org--debian/rdiff-backup--debian--1.0--patch-1
* patching for revision: jgoerzen@complete.org--debian/rdiff-backup--debian--1.0--patch-2
* making pristine copy
* tree version set jgoerzen@complete.org--debian/rdiff-backup--debian--1.0
      </screen>
      <para>
        This command will have created the directory
        <filename>+packages/rdiff-backup/rdiff-backup-0.12.5</filename>
        to contain the sources.  Generating upstream sources works the
        same, and puts them into a directory ending in .orig.
      </para>
      <para>
	If you don't know what version you want but just want the
	latest, you can simply use a command such as <command>tla
	  buildcfg debian/rdiff-backup/latest</command>.
      </para>
    </sect1>

          
  </chapter>

<!--
Local Variables:
mode: sgml
sgml-parent-document:("../dbp.sgml" "book")
  sgml-set-face: T
End:

-->
