  <chapter id="dbp.intro">
    <title>Introduction</title>
    <para>
      Welcome to &dbp;, a system that integrates the
      <ulink url="http://www.debian.org/">Debian</ulink> package build
      system with <ulink url="http://www.abridgegame.org/darcs">Darcs</ulink>.
    </para>
    <sect1 id="dbp.intro.purpose">
      <title>Purpose</title>
      <para>
	&dbp; is designed to do this for you:
      </para>
      <itemizedlist>
	<listitem><para>Ability to track changes to both upstream and Debian
	    sources through time</para>
	</listitem>
	<listitem><para>Ability to retrieve any version of the sources
	    from the archive, and build Debian binary and source
	    packages from them.</para>
	</listitem>
	<listitem><para>Generated packages can be built and used by
	    people that have neither &darcs; nor &dbp; installed.
	  </para>
	</listitem>
	<listitem><para>Provide an alternative to systems like dbs and
	    dpatch to help manage patches that Debian applies to
	    packages.
	  </para>
	</listitem>
	<listitem><para>Provide a way to ease collaboration between
	    multiple Debian developers on a single package.</para>
	</listitem>
	<listitem><para>Provide a way to use the merging (update and
	    replay) features of &darcs; to help merge Debian changes into
	    new versions of upstream packages.
	  </para>
	</listitem>
	<listitem><para>Make it easy to try &dbp; and switch back to
	    normal systems if you don't like it.
	  </para>
	</listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="ch.intro.features">
      <title>Features</title>
      <para>
	&dbp; has these features:
      </para>
      <itemizedlist>
	<listitem><para>dbp-importdsc will import an entire Debian
	    source package into your Darcs area, handling both
	    upstream and Debian trees automatically.  dbp-importdsc
	    can be run repeatedly to import newer versions,
	    maintaining a full change history as it goes along.            
	  </para>
	</listitem>
	<listitem><para>dbp-importorig can import an upstream tar.gz or a
	    directory into your archive with a single command.</para>
	</listitem>
	<listitem><para>darcs-buildpackage can use an existing
	    orig.tar.gz, or can build you one from the Darcs archive if
	    necessary.</para>
	</listitem>
        <listitem><para>darcs-buildpackage works for both
            Debian-native and normal (upstream) packages.</para>
        </listitem>
	<listitem><para>darcs-buildpackage ensures that Darcs metadata
	    (the _darcs directory) doesn't show up in tar.gz or diff.gz files.
	  </para>
	</listitem>
	<listitem><para>Tight integration with darcs_load_dirs for
	    intelligent handling and versioning 
            of file renames upstream.</para>
	</listitem>
	<listitem><para>Autosensing of information wherever possible
	    from Debian changelogs, dsc files, and the darcs
	    environment.
	  </para>
	</listitem>
	<listitem><para>dbp-markdeb can be used to easily checkpoint
	    development into Darcs.</para>
	</listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="ch.intro.flow">
      <title>Usage Overview</title>
      <indexterm><primary>Overview</primary></indexterm>
      <para>
	Here is a high-level overview of the Debian development
	process using &dbp;.
      </para>
      <para>
        You'll start by creating your
	<filename>~/.darcs-buildpackage</filename> configuration file
	and making a directory to store your Darcs repositories, if
	you don't already have one.
      </para>
      <para>
        Next, it's time to bring your packages into Darcs.
	If you have some existing Debian
	packages, you'll import as much history as you like by using
	dbp-importdsc.  Otherwise, to start a new package in &dbp;,
	you'll use dbp-importorig to bring in the upstream sources.
	Then, you'll use <command>darcs get</command> to copy the
	upstream area to the Debian area.
      </para>
      <para>
	As you work on your Debian sources, you'll use
	darcs-buildpackage in place of debuild or dpkg-buildpackage
	(darcs-buildpackage passes all its arguments to debuild for
	you).  You can use standard Darcs commands, such as 
        <command>darcs record</command>	or <command>darcs
	changes</command>, to commit changes and view history.  When you
	have a final version of a Debian package, you'll upload it and
	run dbp-markdeb to tag the version for future reference.
      </para>
    </sect1>

  </chapter>

<!--
Local Variables:
mode: sgml
sgml-parent-document:("../dbp.sgml" "book")
sgml-set-face: T
End:

# arch-tag: common data for darcs-buildpackage manual: intro chapter
-->
